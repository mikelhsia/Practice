/* 如果某些属性在不同的样式表中被同样的选择器定义，那么属性值将从更具体的样式表中被继承过来。 
	当同一个 HTML 元素被不止一个样式定义时，会使用哪个样式呢？
	一般而言，所有的样式会根据下面的规则层叠于一个新的虚拟样式表中，其中数字 4 拥有最高的优先权。
	1. 浏览器缺省设置
	2. 外部样式表
	3. 内部样式表（位于 <head> 标签内部）
	4. 内联样式（在 HTML 元素内部）
	因此，内联样式（在 HTML 元素内部）拥有最高的优先权，这意味着它将优先于以下的样式声明： 
	- 标签中的样式声明，外部样式表中的样式声明，或者浏览器中的样式声明（缺省值）。
	*/
body{
	font-family:arial;
/*默认情况下 background-image 属性会在页面的水平或者垂直方向平铺。 水平方向平铺好一点
 background-repeat:repeat-x, repeat-y, no-repeat, inherit;*/
	/*
	background-image:url('001.jpg');
	background-repeat:repeat-x;
	background-position:right bottom;
	background-attachment: scroll fixed inherit;
	*/
	background:url('005.jpg') no-repeat fixed right bottom;
}

h1 {
	color:red;
	padding: 50px;
}
h3 {
	color:#000AD2;
	margin-top:0px;
	/* Or using 
	    font-size transform: 1em = 16px
	    font:italic bold 12px/30px Georgia,serif;*/
	font-size: 24px;
	padding-left:20px;
	text-align:center;
}
p {
	color:white;
	font-weight:300%;
	background-color:red;
	text-indent:10px;
	white-space:nowrap; /*禁用文字环绕oline-height:200%;*/
	line-height:200%; /*行高*/
	letter-spacing:0.8;
	word-spacing:0.8;
	border:1px solid red;
}
p.dotted {outline-style:dotted;}
p.dashed {outline-style:dashed;}
p.solid {outline-style:solid;}
p.double {outline-style:double;}
p.groove {outline-style:groove;}
p.ridge {outline-style:ridge;}
p.inset {outline-style:inset;}
p.outset {outline:outset blue 5px;}

p.normal {font-variant:normal;}        /*字形变换*/
p.small {font-variant:"small-caps";}     /*字形变换*/
p span {
	color:red;
	direction:rtl; /*从右到左的书写方向*/
}
p #result {
	color:blue;
	font-size:2em;
	font-weight:bolder;
	padding-right:15px;
	word-spacing: 5px;
}

#image {
	width:30%;
}


.head {
	/*
	border-style:dotted;
	border-style:none;
	border-style:solid;
	border-style:dashed;
	border-style:groove;	定义3D沟槽边界
	border-style:ridge;		定义3D脊边界
	border-style:inset;		定义3D嵌入边框
	border-style:outset;	定义3D突出边框
	*/
	border-style:dotted groove inset outset;
	border-color:blue red green powderblue;
	border-width:2px 3px 4px 5px;
	/* 每个边都可以设置不同的边框形式
	   border-top-style:dotted;
	   border-right-style:solid;
	   border-bottom-style:dotted;
	   border-left-style:solid;
	*/
	/* 可包含border-width, border-style(required) border-color
		border: 5px solid red
	 */
}

article h1 {
	font-size:32px;
	border-style:dotted;
	border-width:2px;
	background-color:white;
	font-transform: uppercase;
	padding:5px;
	margin:0px;
    margin-top:20px;
    text-shadow:2px 2px #FFFF00;
}

section{
	background-color:powderblue;
	padding:0px;
	margin:0px;
}

article section p .ftf {
	/*Always fallback if Font is not support*/
	font-family: "Timese New Roman", Times, serif;
}

img.top {
	/*Text-Top对齐的图像*/
	vertical-align:text-top;
}
img.bottom {
	/*Text-Bottom对齐的图像*/
	vertical-align:text-bottom;
}


/* Link Style: (Pseudo-Classes)
	:link		Normal, not visited link
	:visited	Visited link
	:hover		Mouse over and hover
	:active		The moment that link was clicked*/
/** Additional rules:
	a:hover has to place behind a:link and a:visited
	a:active has to place behind a:hover*/
/* Other pseudo-classes
   :first-child		Select the first child element
   :lang			Set rules for different languages
   input:focus		Select the focus element
   ** The rest of the pseudo-classes: http://www.runoob.com/css/css-pseudo-classes.html
   * input:checked
   * input:enabled
   * input:disabled
   * input:focus
   * input:in-range
   * input:out-of-range
   * input:valid
   * input:invalid
   * input:optional
   * input:read-only
   * input:read-write
   * input:required

   * root
   * #news:target
   * a:link
   * a:visited
   * a:active
   * a:hover

   * :not(p)
   * p:empty
   * p:first-of-type
   * p:first-letter
   * p:first-line
   * p:first-child
   * p:last-child
   * p:nth-child(2)
   * p:nth-last-child(2)
   * p:nth-last-type(2)
   * p:nth-of-type(2)
   * p:only-of-type
   * p:only-child
   * p:before		可以在元素的内容前面插入新内容
   * p:after		可以在元素的内容后面插入新内容 
   * p:lang(it)
  */
/* Example:
	a {  
		position: relative;  
		display: inline-block;  
		outline: none;  
		text-decoration: none;  
		color: #000;  
		font-size: 32px;  
		padding: 0 10px;  
	}  
								  
	大框   
	a:hover::before, a:hover::after {   
		content: "";  
		display: block;  
		position: absolute;  
		top: -15%%;  
		left: -14%%;  
		width: 120%;  
		height: 120%;  
		border-style: solid;  
		border-width: 4px;  
		border-color: #DDD;  
	}  
  
	小框 
	 a:hover::after {  
		top: 0%;  
		left: 0%;  
		width: 100%;  
		height: 100%;  
		border-width: 2px;  
	}  
 */
/***************************
a:link {
	color:#FFFF00;
	text-decoration:none;
	background-color:#B2FF99;
}
a:visited {
	color:#00FF00;
	text-decoration:line-through;
	background-color:#FFFF85;
}
a:hover {
	color:#FF00FF;
	text-decoration:underline;
	background-color:#FF704D;
}
a:active {
	color:#00FFFF;
	text-decoration:underline;
	background-color:#FF704D;
}
****************************/
/* Match the first child element <p> of any element */
p:first-child {
	border-width: 0 0 5px 0;
	border-color: purple;
}
p:first-child strong {
	font-size:2em;
}
/* Match the first child element <i> in all <p> */
p>b:first-child {
	font-size: 2em;
}
/**/


/* Unorder list and order list style */
/*
	* list-style:			Abbreviation
	* list-style-image:		Image as the bullet
	* list-style-position:	Bullet's position
	* list-style-type:		Type of bullet;
  ul.a {list-style-type:circle;}
  ul.b {list-style-type:disc;}
  ul.c {list-style-type:square;}

  ol.d {list-style-type:armenian;}
  ol.e {list-style-type:cjk-ideographic;}
  ol.f {list-style-type:decimal;}
  ol.g {list-style-type:decimal-leading-zero;}
  ol.h {list-style-type:georgian;}
  ol.i {list-style-type:hebrew;}
  ol.j {list-style-type:hiragana;}
  ol.k {list-style-type:hiragana-iroha;}
  ol.l {list-style-type:katakana;}
  ol.m {list-style-type:katakana-iroha;}
  ol.n {list-style-type:lower-alpha;}
  ol.o {list-style-type:lower-greek;}
  ol.p {list-style-type:lower-latin;}
  ol.q {list-style-type:lower-roman;}
  ol.r {list-style-type:upper-alpha;}
  ol.s {list-style-type:upper-latin;}
  ol.t {list-style-type:upper-roman;}
  ol.u {list-style-type:none;}
  ol.v {list-style-type:inherit;}
*/
nav ul {
	list-style-type:none;
	margin:0;
	padding:0;
}

nav ul li {
	/* 垂直式导航
	display:block;
	width:100px;
	*/
	/* 水平式导航 - 内嵌
	display:inline;
	*/
	/* 水平式导航 - 浮动列表项*/
	float: left;  /*使用浮动块元素的幻灯片彼此相邻*/
}

nav ul li a {
	display:block; /*显示块元素的链接，让整体变为可点击链接区域（不只是文本），它允许我们指定宽度*/
	width:160px; /*块元素默认情况下是最大宽度。我们要指定一个60像素的宽度*/
	height:40px;
	text-align:center;
}

ul.a {
	list-style-type: circle;
	background-color: white;
}

ul.b {
	/* list-style-image: url('001.jpg'); */
	list-style-type: square;
	background-color: white;
}

ol.c {
	list-style-type: upper-roman;
	background-color: white;
}

ol.d {
	list-style-type: lower-alpha;
	background-color: white;
}

/* Table CSS styling*/
#customers
{
	font-family:"Trebuchet MS", Arial, Helvetica, sans-serif;
	width:100%;
	border-collapse:collapse; /*border-collapse 属性设置表格的边框是否被折叠成一个单一的边框或隔开：*/
}
#customers td, #customers th 
{
	font-size:1em;
	border:1px solid #98bf21;
	padding:3px 7px 2px 7px;
}
#customers th 
{
	font-size:1.1em;
	text-align:left;
	padding-top:5px;
	padding-bottom:4px;
	background-color:#A7C942;
	color:#ffffff;
}
#customers tr.alt td 
{
	color:#000000;
	background-color:#EAF2D3;
}

/*分组与嵌套选择器
 分组：
	h1,h2,p
	{
		color:green;
	}

 嵌套：
	p {
		color:blue;
		text-align:center;
	}
	.marked {
		background-color:red;
	}
	.marked p {
		color:white;
	}
 */

p.dotted, p.dashed, p.solid, p.double, p.groove, p.ridge, p.inset, p.outset {
	/* 
	display:none;
	display:block;		改变元素成为块元素
	display:inline;		改变元素成为内连元素
	*/
	display:inline;
	margin-left:10px;
}

p.solid {
	/*
	visibility:visible;
	visibility:hidden;		隐藏元素，但是依旧占用空间，影响布局
	visibility:collapse;	Is used to hide the table rows and columns
	display:none;			完全隐藏该元素，切不占空间
	*/
	visibility:hidden;;
}

/* Dimension
   height
   line-height
   max-height
   max-width
   min-height
   min-width
   width
   */

/* CSS Position
position: static;		HTML元素的默认值，即没有定位，元素出现在正常的流中。 静态定位的元素不会受到top, bottom, left, right影响。
position: fixed;		元素的位置相对于浏览器窗口是固定位置。 即使窗口是滚动的它也不会移动： Fixed定位使元素的位置与文档流无关，因此不占据空间。
position: relative;		相对定位元素的定位是相对其正常位置。
position: absolute;		绝对定位的元素的位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那么它的位置相对于<html>:不占据空间.
z-index属性指定了一个元素的堆叠顺序（哪个元素应该放在前面，或后面） 一个元素可以有正数或负数的堆叠顺序：

clip:rect(0px,80px,200px,0px);  剪裁图片

overflow:visible;		Is default;
overflow:scroll;		当一个元素的内容在指定的区域过大时如何设置以适应，创建一个滚动条
overflow:hidden;		隐藏多余的元素内容
overflow:auto;		
overflow-x:auto hidden scroll visible no-display no-content
overflow-x:auto hidden scroll visible no-display no-content

************* CSS Float ****************
元素的水平方向浮动，意味着元素只能左右移动而不能上下移动。 一个浮动元素会尽量向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。
浮动元素之后的元素将围绕它。 浮动元素之前的元素将不会受到影响。 如果图像是右浮动，下面的文本流将环绕在它左边：
备注：文字和图片等任何元素皆可浮动
float: right;
float: left;

元素浮动之后，周围的元素会重新排列，为了避免这种情况，使用 clear 属性。
clear 属性指定元素两侧不能出现浮动元素。 使用 clear 属性往文本中添加图片廊：
clear: both;
 */
#t1 {
	position:fixed;
	top: 929px;
	right: 50px;
}

#t2 {
	position:relative;
	right: -100px;
}

#t3 {
	position:absolute;
	right:150px;
	bottom:100px;
}

/** 对齐方式 　***
  1. margin-left: auto; margin-right: auto;
  2. position: absolute; right:0px;
  3. float:right; width:300px;
  */


/*
   后代选取器:后代选取器匹配所有值得元素的后代元素。 以下实例选取所有 <p> 元素插入到 <div> 元素中: 
   div p { }

   子元素选取器：与后代选择器相比，子元素选择器（Child selectors）只能选择作为某元素子元素的元素。 以下实例选择了<div>元素中所有直接子元素 <p> ：
   div>p { }
   
   相邻兄弟选取器：相邻兄弟选择器（Adjacent sibling selector）可选择紧接在另一元素后的元素，且二者有相同父元素。 如果需要选择紧接在另一个元素后的元素，而且二者有相同的父元素，可以使用相邻兄弟选择器（Adjacent sibling selector）。 以下实例选取了所有位于 <div> 元素后的第一个 <p> 元素:
   div+p { }
   
   普通相邻兄弟选择器：普通兄弟选择器选取所有指定元素的相邻兄弟元素。 以下实例选取了所有 <div> 元素的所有相邻兄弟元素 <p> : 
   div~p { }
 */
p~div {
	background-color:yellow;
	padding:5px;
}

/**********下拉菜单样式一**************/
.dropdown1 {
	position:relative;
	display:inline-block;
}

.dropdown-content1 {
	display:none;
	position:absolute;
	background-color:#f9f9f9;
	min-width: 160px; /* 注意: 如果你想设置下拉内容与下拉按钮的宽带一致，可设置 width 为 100% ( overflow:auto 设置可以在小尺寸屏幕上滚动)。 */
	box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);  /* 让下拉菜单看起来像一个"卡片"。 */
	padding: 12px 16px;
	z-index:1;
}

.dropdown1:hover .dropdown-content1 {
	display:block;
	background-color:#f9f900;
}

/**********下拉菜单样式二**************/
.dropbtn2 {
	/* 下拉按钮样式 */
	background-color:#4CAF50;
	color:white;
	padding:16px;
	font-size:16px;
	border:none;
	cursor: pointer;
}

.dropdown2 {
	/* 容器div - 需要定位下拉内容 */
	position: relative;
	display: inline-block;
}

.dropdown-content2 {
	/*下拉内容 - 默认隐藏*/
	display: none;
	position: absolute;
	background-color:#f9f9f9;
	min-width:160px;
	box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
}

.dropdown-content2 a {
	/* 下拉菜单的连接 */
	color: black;
	padding: 12px 16px;
	text-decoration: none;
	display: block;
}

.dropdown-content2 a:hover {
	/* hover效果 */
	background-color:#f1f1f1;
}

.dropdown2:hover .dropdown-content2 {
	/* 鼠标移上去后显示下拉菜单 */
	display: block;
}

.dropdown2:hover .dropbtn2 {
	/* 下拉内容显示后 修改下拉按钮的背景色 */
	background-color: #3e8e41
}

/* Picture Gallary */
div.gallary {
	margin:2px;
	border:1px solid #0000ff;
	/*CSS3 
	  CSS3圆角
	  Box shadow 盒阴影*/
	border-radius:15px;
	box-shadow: 10px 10px 5px #888888;
	height:auto;
	width: auto;
	float:left;
	text-align:center;
	background-color:white;
}

div.gallary img {
	opacity:0.5;
	/* filter:alpha(opacity=40); IE 8 以及更早的版本 */
	display:inline;
	margin:3px;
	border: 1px solid #ffffff;
	border-radius:10px;
}

div.gallary a:hover img {
	border: 1px solid #0000ff;
	opacity:1;
}

div.gallary_desc {
	text-align: center;
	font-weight: normal;
	font-size: 12px;
	width:120px;
	margin: 2px;
}

/* 多张图片拼合技术：有许多图像的网页可能需要很长的时间来加载和生成多个服务器的请求。 使用图像拼合会降低服务器的请求数量，并节省带宽。*/
/*
img.home {
	width:46px;
	height:44px;
    background-color:url(img_navsprites_hover.gif) 0 0;
}
*/

#navlist {
	/*位置设置相对定位，让里面的绝对定位*/
	position:relative;
	left:520px;
}

#navlist li {
	/*margin和padding设置为0，列表样式被删除，所有列表项是绝对定位 */
	margin:0;
	padding:0;
	list-style:none;
	position: absolute;
	top:0;
}

#navlist li, #navlist a {
	/*所有图像的高度是44px*/
	height:44px;
	display:block;
}

#home {
	left:0px; /*定位到最左边的方式，以及图像的宽度是46px*/
	width:46px;
	background:url('img_navsprites_hover.gif') 0 0; /*定义背景图像和它的位置（左0px，顶部0px）*/
}

#home:hover {
	background:url('img_navsprites_hover.gif') 0 -45px;
}

#prev {
	left: 63px; /*右侧定位63px（＃home宽46px+项目之间的一些多余的空间），宽度为43px。*/ 
	width:43px;
	background:url('img_navsprites_hover.gif') -47px 0; /*定义背景图像右侧47px（＃home宽46px+分隔线的1px）*/
}

#prev:hover {
	background:url('img_navsprites_hover.gif') -47px -45px;
}

#next {
	left:129px; /*右边定位129px(#prev 63px + #prev宽是43px + 剩余的空间), 宽度是43px.*/
	width:43px;
	background:url('img_navsprites_hover.gif') -91px 0; /*定义背景图像右边91px（＃home 46px+1px的分割线+＃prev宽43px+1px的分隔线）*/
}

#next:hover {
	background:url('img_navsprites_hover.gif') -91px -45px;
}


/* Media type/rule:
	all:		全部的媒体设备
	aural:		语音和音频合成器
	braille:	用于盲人用电子发触觉回馈设备
	embossed:	用于分页的盲人用点字法打印机
	handheld:	用于小的手持设备
	print:		用于打印机
	projection:	用于幻灯片
	screen:		用于电脑显示器
	tty:		用于使用固定密度字母删格的媒体，比如电传打字机和终端
	tv:			用于电视机类型的设备
 */
 /*
	@media not|only mediatype and (expressions) and (expression) ... {
    	CSS 代码...;
	}
	@media screen and (max-width: 699px) and (min-width: 520px) --- 520 到 699px 宽度 
	@media screen and (max-width: 1000px) and (min-width: 700px) --- 700 到 1000px
	@media screen and (min-width: 1001px) --- 大于 1001px 宽度
	@media screen and (orientation: portrait | landscape)
	-----------------------------------------------
	not: not是用来排除掉某些特定的设备的，比如 @media not print（非打印设备）。
	only: 用来定某种特别的媒体类型。对于支持Media Queries的移动设备来说，如果存在only关键字，移动设备的Web浏览器会忽略only关键字并直接根据后面的表达式应用样式文件。对于不支持Media Queries的设备但能够读取Media Type类型的Web浏览器，遇到only关键字时会忽略这个样式文件。
	all: 所有设备，这个应该经常看到。
	-----------------------------------------------
	max-device-aspect-ratio	定义输出设备的屏幕可见宽度与高度的最大比率。
	min-device-aspect-ratio	定义输出设备的屏幕可见宽度与高度的最小比率。
	device-aspect-ratio	定义输出设备的屏幕可见宽度与高度的比率。
	max-device-height	定义输出设备的屏幕可见的最大高度。
	min-device-height	定义输出设备的屏幕的最小可见高度。
	max-height	定义输出设备中的页面最大可见区域高度。
	min-height	定义输出设备中的页面最小可见区域高度。
	device-height	定义输出设备的屏幕可见高度。
	height	定义输出设备中的页面可见区域高度。
	max-device-width	定义输出设备的屏幕最大可见宽度。
	min-device-width	定义输出设备的屏幕最小可见宽度。
	max-width	定义输出设备中的页面最大可见区域宽度。
	min-width	定义输出设备中的页面最小可见区域宽度。
	device-width	定义输出设备的屏幕可见宽度。
	width	定义输出设备中的页面可见区域宽度。
	grid	用来查询输出设备是否使用栅格或点阵。
	-----------------------------------------------
	orientation: portrait | lanscape;
 */
@media screen {
}

@media print {
	h1 {
		border:10px dashed black;
		background-color: black;
	}
}

@media screen, print {
}

@media handheld {
	h1 {
		border:10px dashed black;
		background-color: black;
	}
}

/* 属性选择器 */
[home] {
	font-size:20px;	
	display:block;
}

[home=yes] {
/* [home~=yes] {  这是代表大约值*/
/* [home|=yes] {  这是代表大约值*/
/* span [home|=yes] {  与元素合并使用*/
	color: red;
	display:block;
}

#round_border {
	-webkit-border-image:url(border.png) 30 30 round; /* Safari 5 and older */
	-o-border-image:url(border.png) 30 30 round; /* Opera */
	border-image: url('border.png') 30 30 round;
}

#stretch_border {
	-webkit-border-image:url(border.png) 30 30 stretch; /* Safari 5 and older */
	-o-border-image:url(border.png) 30 30 stretch; /* Opera */
	border-image: url('border.png') 30 30 stretch;
}

/* 圆角属性：
	border-radius
	border-top-left-radius
	border-top-right-radius
	border-bottom-right-radius
	border-bottom-left-radius */
#rcorners1 {
	border-radius: 15px 50px 30px 5px;
	background: #8AC007;
	padding: 20px; 
	width: 200px;
	height: 150px; 
}

#rcorners2 {
	border-radius: 15px 50px 30px;
	background: #8AC007;
	padding: 20px; 
	width: 200px;
	height: 150px; 
}

#rcorners3 {
	border-radius: 15px 50px;
	background: #8AC007;
	padding: 20px; 
	width: 200px;
	height: 150px; 
} 

#bg_panel {
	width: 1000px;
	height: 1000px;
	border: 5px solid #fEA;
	padding: 15px;
	background-image: url(002.jpg), url(003.jpg);
	background-size: 60% 60%, 20% 20%;
	background-position: right bottom, left top;
	background-repeat: no-repeat, repeat;
	background-origin: content-box, padding-box;
	background-clip: content-box, border-box;
}

#example1 {
	border: 10px dotted black;
	padding:35px;
	background: yellow;
}

#example2 {
	border: 10px dotted black;
	padding:35px;
	background: yellow;
	background-clip: padding-box;
}

#example3 {
	border: 10px dotted black;
	padding:35px;
	background: yellow;
	background-clip: content-box;
}

/*Gradient
	Linear Gradients - 向下/向上/向左/向右/对角方向
	Radial Gradients - 由它们的中心定义 */
/*从上到下*/
/*透明度：可利用rgba()来定义透明度。0代表完全透明，1表示完全不透明*/
#grad1 {
	height: 200px;
	background: -webkit-linear-gradient(rgba(255,0,0,0.2), rgba(0,255,0,0.5));		/* Safari 5.1 - 6.0 */
	background: -o-linear-gradient(red, blue);			/* Opera 11.1 - 12.0 */
	background: -moz-linear-gradient(red, blue);		/* Firefox 3.6 - 15 */
	background: linear-gradient(rgba(255,0,0,0.2), rgba(255,0,0,0.9));				/* 标准的语法（必须放在最后） */
}

/*从左到右*/
#grad2 {
	height: 200px;
	background: -webkit-linear-gradient(left, red, blue);	/* Safari 5.1 - 6.0 */
	background: -o-linear-gradient(right, red, blue);		/* Opera 11.1 - 12.0 */
	background: -moz-linear-gradient(right, red, blue);		/* Firefox 3.6 - 15 */
	background: linear-gradient(to right, red 20%, blue);		/* 标准的语法（必须放在最后） */
}

/*从左上到右下*/
#grad3 {
	height: 200px;
	background: -webkit-linear-gradient(left top, red, blue);		/* Safari 5.1 - 6.0 */
	background: -o-linear-gradient(bottom right, red, blue);		/* Opera 11.1 - 12.0 */
	background: -moz-linear-gradient(bottom right, red, blue);		/* Firefox 3.6 - 15 */
	background: linear-gradient(to bottom right, red, blue);		/* 标准的语法（必须放在最后） */
}

/*带有角度的渐变*/
#grad4 {
	height: 200px;
	background: -webkit-linear-gradient(180deg, red, blue);		/* Safari 5.1 - 6.0 */
	background: -o-linear-gradient(180deg, red, blue);		/* Opera 11.1 - 12.0 */
	background: -moz-linear-gradient(180deg, red, blue);		/* Firefox 3.6 - 15 */
	background: linear-gradient(180deg, red, blue);		/* 标准的语法（必须放在最后） */
}

/*多个颜色节点*/
#grad5 {
	height: 200px;
	background: -webkit-linear-gradient(left,red,orange,yellow,green,blue,indigo,violet); /* Safari 5.1 - 6.0 */
	background: -o-linear-gradient(left,red,orange,yellow,green,blue,indigo,violet); /* Opera 11.1 - 12.0 */
	background: -moz-linear-gradient(left,red,orange,yellow,green,blue,indigo,violet); /* Firefox 3.6 - 15 */
	background: linear-gradient(to right, red,orange,yellow,green,blue,indigo,violet); /* 标准的语法 */
}

/*一个重复性的渐变*/
#grad6 {
	height:200px;
	background: -webkit-repeating-linear-gradient(red, yellow 10%, green 20%); /* Safari 5.1 - 6.0 */
	background: -o-repeating-linear-gradient(red, yellow 10%, green 20%); /* Opera 11.1 - 12.0 */
	background: -moz-repeating-linear-gradient(red, yellow 10%, green 20%); /* Firefox 3.6 - 15 */
	background: repeating-linear-gradient(red, yellow 10%, green 20%); /* 标准的语法 */
}

/* radial-gradient
径向渐变 - 颜色结点均匀分布（默认情况下）*/
#grad7 {
	height:200px;
	background: -webkit-radial-gradient(red, green, blue); /* Safari 5.1 - 6.0 */
	background: -o-radial-gradient(red, green, blue); /* Opera 11.6 - 12.0 */
	background: -moz-radial-gradient(red, green, blue); /* Firefox 3.6 - 15 */
	background: radial-gradient(red, green, blue); /* 标准的语法 */
}

/*径向渐变 - 颜色结点不均匀分布*/
#grad8 {
	height:200px;
	background: -webkit-radial-gradient(red 5%, green 15%, blue 60%); /* Safari 5.1 - 6.0 */
	background: -o-radial-gradient(red 5%, green 15%, blue 60%); /* Opera 11.6 - 12.0 */
	background: -moz-radial-gradient(red 5%, green 15%, blue 60%); /* Firefox 3.6 - 15 */
	background: radial-gradient(red 5%, green 15%, blue 60%); /* 标准的语法 */
}

/*径向渐变 - 设置行形状：circle or ellipse(default)*/
#grad9 {
	height:200px;
    background: -webkit-radial-gradient(circle, red, yellow, green); /* Safari 5.1 - 6.0 */
	background: -o-radial-gradient(circle, red, yellow, green); /* Opera 11.6 - 12.0 */
	background: -moz-radial-gradient(circle, red, yellow, green); /* Firefox 3.6 - 15 */
	background: radial-gradient(circle, red, yellow, green); /* 标准的语法 */
}

/*	size 参数定义了渐变的大小。它可以是以下四个值：
		- closest-side
		- farthest-side
		- closest-corner
		- farthest-corner */
#grad10 {
	height:200px;
	width:200px;
	float:left;
	border:2px solid #FFF;
	background: -webkit-radial-gradient(60% 55%, closest-side,blue,green,yellow,black); /* Safari 5.1 - 6.0 */
	background: -o-radial-gradient(60% 55%, closest-side,blue,green,yellow,black); /* Opera 11.6 - 12.0 */
	background: -moz-radial-gradient(60% 55%, closest-side,blue,green,yellow,black); /* Firefox 3.6 - 15 */
	background: radial-gradient(60% 55%, closest-side,blue,green,yellow,black); /* 标准的语法 */
}
#grad11 {
	height:200px;
	width:200px;
	float:left;
	border:2px solid #FFF;
	background: -webkit-radial-gradient(60% 55%, farthest-side,blue,green,yellow,black); /* Safari 5.1 - 6.0 */
	background: -o-radial-gradient(60% 55%, farthest-side,blue,green,yellow,black); /* Opera 11.6 - 12.0 */
	background: -moz-radial-gradient(60% 55%, farthest-side,blue,green,yellow,black); /* Firefox 3.6 - 15 */
	background: radial-gradient(60% 55%, farthest-side,blue,green,yellow,black); /* 标准的语法 */
}
#grad12 {
	height:200px;
	width:200px;
	float:left;
	border:2px solid #FFF;
	background: -webkit-radial-gradient(60% 55%, closest-corner,blue,green,yellow,black); /* Safari 5.1 - 6.0 */
	background: -o-radial-gradient(60% 55%, closest-corner,blue,green,yellow,black); /* Opera 11.6 - 12.0 */
	background: -moz-radial-gradient(60% 55%, closest-corner,blue,green,yellow,black); /* Firefox 3.6 - 15 */
	background: radial-gradient(60% 55%, closest-corner,blue,green,yellow,black); /* 标准的语法 */
}
#grad13 {
	height:200px;
	width:200px;
	float:left;
	border:2px solid #FFF;
	background: -webkit-radial-gradient(60% 55%, farthest-corner,blue,green,yellow,black); /* Safari 5.1 - 6.0 */
	background: -o-radial-gradient(60% 55%, farthest-corner,blue,green,yellow,black); /* Opera 11.6 - 12.0 */
	background: -moz-radial-gradient(60% 55%, farthest-corner,blue,green,yellow,black); /* Firefox 3.6 - 15 */
	background: radial-gradient(60% 55%, farthest-corner,blue,green,yellow,black); /* 标准的语法 */
}

/*重复的径向渐变*/
#grad14 {
	height:100px;
	width:100px;
	float:left;
	border:2px solid #FFF;
	background: -webkit-repeating-radial-gradient(red, yellow 10%, green 15%); /* Safari 5.1 - 6.0 */
	background: -o-repeating-radial-gradient(red, yellow 10%, green 15%); /* Opera 11.6 - 12.0 */
	background: -moz-repeating-radial-gradient(red, yellow 10%, green 15%); /* Firefox 3.6 - 15 */
	background: repeating-radial-gradient(red, yellow 10%, green 15%); /* 标准的语法 */
}

#sha1 {
	text-shadow: 5px 5px 5px #FFF000;
	display:inline-block;
}

#sha2 {
	height:100px;
	width:100px;
	box-shadow:10px 10px grey;
	background:white;
	display:inline-block;
}

#sha3 {
	height:100px;
	width:100px;
	box-shadow:10px 10px 5px grey;
	background:white;
	display:inline-block;
}

/*CSS模拟照片*/
#boxshadow {
	position:relative;
	-moz-box-shadow: 1px 2px 4px rgba(0, 0, 0,0.5);
	-webkit-box-shadow: 1px 2px 4px rgba(0, 0, 0, .5);
	box-shadow:1px 2px 4px rgba(0,0,0,0.5);
	padding:10px;
	background:white;
}

/*Make the image fit the box*/
#boxshadow #boxshadow_img {
	width:100%;
	border: 1px solid #8a4419;
	border-style:inset;
}

#boxshadow::after {
	content:'';
	position: absolute;
	/*Hide shadow behind image*/
	/* However it doesn't work
		z-index:-1;	
	*/	
	z-index:10;
	-webkit-box-shadow: 0 15px 20px rgba(0, 0, 0, 0.3);
    -moz-box-shadow: 0 15px 20px rgba(0, 0, 0, 0.3);
	box-shadow:0 15px 20px rgba(0,0,0,0.3);
	width:70%;
	left:15%;			/*One half of the remaining 30%*/
	height: 100px;
	bottom:0;
}

/*box-shadow 属性用来可以创建纸质样式卡片*/
#card {
	width:250px;
	/*添加多个阴影*/
	box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19);
	text-align: center;
}

#card_header {
	height:150px;
	background-color: #4CAF50;
	color:white;
	padding: 10px;
	font-size: 40px;
	margin: auto auto auto auto;
}

#card_container {
	padding: 10px;
}

/* Text overflow:	clip;		超出容器，直接切掉
					ellipsis;	超出容器，加上...
   word-wrap:		break-word;	换行时直接把过长的字在换行时给切掉并自动换到下一行。	
					normal;		
   word-break:		break-all;	字在行尾换行的时候会自动在中间切断
					keep-all;	字在行尾换行的时候会在空格的时候才切断
   Others:
	hanging-punctuation		规定标点字符是否位于线框之外
	punctuation-trim		规定是否对标点字符进行修剪
	text-align-last		设置如何对齐最后一行或紧挨着强制换行符之前的行
	text-emphasis		向元素的文本应用重点标记以及重点标记的前景色
	text-justify		规定当 text-align 设置为 "justify" 时所使用的对齐方法
	text-outline		规定文本的轮廓
	text-overflow		规定当文本溢出包含元素时发生的事情
	text-shadow			向文本添加阴影
	text-wrap			规定文本的换行规则
	word-break			规定非中日韩文本的换行规则
	word-wrap			允许对长的不可分割的单词进行分割并换行到下一行
 */
div.test
{
	white-space:nowrap; 
	width:12em; 
	overflow:hidden; 
	border:1px solid #000000;
}

/*Default font
 font-stretch:			拉伸字体
	normal
	condensed
	ultra-condensed
	extra-condensed
	semi-condensed
	expanded
	semi-expended
	extra-expended
	ultra-expended
 font-style:			字体的样式
	normal
	italic
	oblique
 font-weight:			字体的粗细
	normal
	bold
	100~800
 */
@font-face {
	font-family:myFirstFont;
	src: url(../fonts/IMFeDPit29C.otf);
}

/*To Specify the font-family's basic style such as bold or italic*/
@font-face {
	font-family:myFirstFont;
	src: url(../fonts/IMFeTLrm29C.otf);
	font-weight:bold;
}

@font-face {
	font-family:myFirstFont;
	src: url(../fonts/IMFeFlow2.otf);
	font-style:italic;
}

#myFont {
	font-family:myFirstFont;
	font-size:32px;
	line-height:20px;
}

/*CSS3 2D Conversion
	translate()		根据左(X轴)和顶部(Y轴)位置给定的参数，从当前元素位置移动
					translateX(n)
					translateY(n)
	rotate()		在一个给定度数顺时针旋转的元素。负值是允许的，这样是元素逆时针旋转。
	scale()			该元素增加或减少的大小，取决于宽度（X轴）和高度（Y轴）的参数
					scaleX(n)
					scaleY(n)
	skew()			包含两个参数值，分别表示X轴和Y轴倾斜的角度，如果第二个参数为空，则默认为0，参数为负表示向相反方向倾斜。
					skew(x,y)
					skewX(<angle>);表示只在X轴(水平方向)倾斜。
					skewY(<angle>);表示只在Y轴(垂直方向)倾斜。
	matrix()		matrix()方法和2D变换方法合并成一个。
					matrix 方法有六个参数，包含旋转，缩放，移动（平移）和倾斜功能。
 */

div#twoD_tl {
	width:200px;
	height:100px;
	background-color:grey;
	border: 2px dashed #FFFFEA;
	transform:translate(50px,-100px);
	-ms-transform:translate(50px,-100px);		/*IE 9*/
	-webkit-transform:translate(50px,-100px);	/*Safari and Chrome*/
}

div#twoD_rt {
	width:200px;
	height:100px;
	border: 2px dashed #FFFFEA;
	background-color:grey;
	transform:rotate(30deg);
	-ms-transform:rotate(30deg);		/*IE 9*/
	-webkit-transform:rotate(30deg);	/*Safari and Chrome*/
}

div#twoD_sc {
	width:200px;
	height:100px;
	border: 2px dashed #FFFFEA;
	background-color:grey;
	transform:scale(1,2);
	-ms-transform:scale(1,2);		/*IE 9*/
	-webkit-transform:scale(1,2);	/*Safari and Chrome*/
}

div#twoD_sk {
	width:200px;
	height:100px;
	border: 2px dashed #FFFFEA;
	background-color:grey;
	transform:skew(30deg,20deg);
	-ms-transform:skew(30deg,20deg);		/*IE 9*/
	-webkit-transform:skew(30deg,20deg);	/*Safari and Chrome*/
}

div#twoD_mt {
	width:200px;
	height:100px;
	border: 2px dashed #FFFFEA;
	background-color:grey;
	/* 六个参数，包含旋转，缩放，移动（平移）和倾斜功能。 */
	transform:matrix(0.866,0.5,-0.5,0.866,0,0);
	-ms-transform:matrix(0.866,0.5,-0.5,0.866,0,0);		/*IE 9*/
	-webkit-transform:matrix(0.866,0.5,-0.5,0.866,0,0);	/*Safari and Chrome*/
}


/*CSS3 3D Conversion
  转换属性：
	transform:										向元素应用 2D 或 3D 转换。
	transform-origin: x-axis y-axis z-axis;			允许你改变被转换元素的位置。
		x-axis -	left center right length %
		y-axis -	top center bottom length %
		z-axis -	length
	transform-style:								规定被嵌套元素如何在 3D 空间中显示。
		flat -			表示所有子元素在2D平面呈现。
		preserve-3d -	表示所有子元素在3D空间呈现。
	perspective:				规定 3D 元素的透视效果。
		number -	元素距离视图的距离，以像素计。
		none -		默认值。与0相同。不设置透视
	perspective-origin: x-axis y-axis;				规定 3D 元素的底部位置。
		x-axis -	left center right length %
		y-axis -	top center bottom length %	
	backface-visibility:							定义元素在不面对屏幕时是否可见。
		visible -	背面是可见的
		hidden -	背面时不可见的
  3D转换方法：
	matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n);
	translate3d(x,y,z);
	translateX(x);
	translateY(y);	
	translateZ(z);
	scale3d(x,y,z);
	scaleX(x);
	scaleY(y);
	scaleZ(z);
	rotate3d(x,y,z,angle);
	rotateX(angle);		围绕其在一个给定度数X轴旋转的元素。
	rotateY(angle);		围绕其在一个给定度数Y轴旋转的元素。
	rotateZ(angle);		围绕其在一个给定度数Y轴旋转的元素。
	perspective(n);
*/

/*CSS3 Transition: 
	简写公式：
		transition: property duration timing-function delay;
	属性：
		transition property: none|all|property
		transition duration: time
		transition-timing-function: linear|ease|ease-in|ease-out|ease-in-out|cubic-bezier(n,n,n,n);
				linear					规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）。
				ease					默认。规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）。
				ease-in					规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）。
				ease-out				规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）。
				ease-in-out				规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）。
				cubic-bezier(n,n,n,n)	在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值。
		transition-delay: time
	要先指定两样东西：
		1. 指定要添加效果的CSS属性
		2. 指定效果的持续时间。
	要添加多个样式的变换效果，添加的属性由逗号分隔：*/
#transition {
	width:100px;
	height:100px;
	background:red;
	transition:width 2s,height 2s, transform 2s, background 2s;
	-webkit-transition:width 2s, height 2s, transform 2s, background 2s;	/*Safari*/
	display: inline-block;
}
#transition:hover {
	/*指定的CSS属性的值更改时效果会发生变化。一个典型CSS属性的变化是用户鼠标放在一个元素上时*/
	width:300px;
	height:400px;
	transform: translate3d(5px, 10px, 15px);
	-webkit-transform: translate3d(5px, 10px, 15px);
	background:blue;
}

#transition:hover:after {
	content:'Widening...';
	color:white;
}


/* CSS3 animation @keyframes规则是创建动画。 
				  @keyframes规则内指定一个CSS样式和动画将逐步从目前的样式更改为新的样式。
	animation: animation: name duration timing-function delay iteration-count direction fill-mode play-state;;
				所有动画属性的简写属性，除了 animation-play-state 属性。
	animation-name: keyframename|none;
				keyframe	指定要绑定到选择器的关键帧名称
				none		制定有没有动画（可用于覆盖从级联的动画
	animation-duration: time;
				time		指定动画播放完成花费的时间。默认值为 0，意味着没有动画效果。
	animation-timing-function: linear|ease|ease-in|ease-out|ease-in-out|cubic-bezier(n,n,n,n);
	animation-delay: time
				time		animation-timing-function: value;
	animation-iteration-count: n|infinite;
				n			一个数字，定义应该播放多少次动画
				infinite	指定动画应该播放无限次（永远）
	animation-direction: normal|reverse|alternate|alternate-reverse|initial|inherit;
				normal				默认值。动画按正常播放。
				reverse				动画反向播放。	
				alternate			动画在奇数次（1、3、5...）正向播放，在偶数次（2、4、6...）反向播放。
				alternate-reverse	动画在奇数次（1、3、5...）反向播放，在偶数次（2、4、6...）正向播放。	
				initial				设置该属性为它的默认值。请参阅 initial。
				inhert				从父元素继承该属性。请参阅 inherit。
	animation-play-state: paused|running;
				paused		指定暂停动画	
				running		指定正在运行的动画
 */
@keyframes myFirstAnime {
	from {
		background:red;
	}
	to {
		background:yellow;
		border:28px solid #FFFFEA;
	}
}

/*Safari and Chrome*/
@-webkit-keyframes myFirstAnime {  
	from {
		background:red;
	}
	to {
		background:yellow;
		border:28px solid #FFF;
	}
}

#myAnime {
	width:100px;
	height:100px;
	background: red;
	display: inline-block;
}

#myAnime:hover {
	animation: myFirstAnime 5s;
	-webkit-animation: myFirstAnime 5s;
}

@keyframes mySecondAnime {
	0% {
		background:red;
		left:0px;
		top:0px;
	}
	25% {
		background:yellow;
		left:200px;
		top:0px;
	}
	50% {
		background:blue;
		left:200px;
		top:200px;
	}
	75% {
		background:green;
		left:0px;
		top:200px;
	}
	100% {
		background:red;
		left:0px;
		top:0px;
	}
}

@-webkit-keyframes mySecondAnime {
	0% {
		background:red;
		left:0px;
		top:0px;
	}
	25% {
		background:yellow;
		left:200px;
		top:0px;
	}
	50% {
		background:blue;
		left:200px;
		top:-200px;
	}
	75% {
		background:green;
		left:0px;
		top:-200px;
	}
	100% {
		background:red;
		left:0px;
		top:0px;
	}
}

#mySecondAnime {
	width:100px;
	height:100px;
	background: red;
	position:relative;
	display: inline-block;
}

#mySecondAnime:hover {
	animation: mySecondAnime 5s;
	-webkit-animation: mySecondAnime 5s;
}

/* CSS3 resize resize属性指定一个元素是否应该由用户去调整大小。 这个 div 元素由用户调整大小。
	resize: both | vertical | horizontal */
div#resize {
	border:2px solid;
	padding:10px 40px;
	width:300px;
	resize:both;
	overflow:auto;
}

/*box-sizing 属性允许您以确切的方式定义适应某个区域的具体内容
  CSS3 box-sizing 属性在一个元素的 width 和 height 中包含 padding(内边距) 和 border(边框)。
  如果在元素上设置了 box-sizing: border-box; 则 padding(内边距) 和 border(边框) 也包含在 width 和 height 中
*/
div.container
{
	width:30em;
	border:1em solid;
}
div.box
{
	box-sizing:border-box;
	-moz-box-sizing:border-box; /* Firefox */
	width:50%;
	border:1em solid red;
	float:left;
}

/*CSS3 外形修饰(outline-offset): outline-offset 属性对轮廓进行偏移，并在超出边框边缘的位置绘制轮廓。
 轮廓与边框有两点不同：
 1. 轮廓不占用空间
 2. 轮廓可能是非矩形*/
div.outline
{
	margin:20px;
	width:150px; 
	padding:30px;
	height:70px;
	border:2px solid black;
	outline:2px solid red;	/*Define outline first*/
	outline-offset:15px;	/*And then define where the outline would be*/
} 

/*CSS3 appearance 模拟用户界面标准元素
	appearance: normal
				icon
				window
				button
				menu
				field*/
#ap_i {
	appearance:icon;
	-moz-appearance:icon;
	-webkit-appearance:icon;
}
#ap_w {
	appearance:window;
	-moz-appearance:window;
	-webkit-appearance:window;
}
#ap_b {
	appearance:button;
	-moz-appearance:button;
	-webkit-appearance:button;
}
#ap_m {
	appearance:menu;
	-moz-appearance:menu;
	-webkit-appearance:menu;
}
#ap_f {
	appearance:field;
	-moz-appearance:field;
	-webkit-appearance:field;
}

/*CSS3 images*/
img#img1 {
	width:30%;
	border-radius:8px;
}
img#img2 {
	width:30%;
	border-radius:50%;
}
img#img3 {
	width:30%;
	border: 1px solid #ddd;
	border-radius: 4px;
	padding:5px;
	transition: box-shadow 0.8s, width 0.8s;
	background: white;
}

img#img3:hover {
	box-shadow: 0 2px 4px rgba(0,140,186,0.5);
	width:35%;
}

/*响应式图片*/
img#img4 {
	max-width:100%;
	height: auto;
}

/*图片上添加文本信息*/
#textOnImgContainer {
	position:relative;
}

#textOnImgImg {
	max-width:100%;
	height:auto;
}

#topLeftText {
	position:absolute;
	top:8px;
	left:16px;
	background:#FFFFEA;
	opacity:0.4;
	box-shadow:1px 1px 3px grey;
}

#topRightText {
	position:absolute;
	top:8px;
	right:16px;
	background:#FFFFEA;
	opacity:0.4;
	box-shadow:1px 1px 3px grey;
}

#bottomLeftText {
	position:absolute;
	bottom:8px;
	left:16px;
	background:#FFFFEA;
	opacity:0.4;
	box-shadow:1px 1px 3px grey;
}

#bottomRightText {
	position:absolute;
	bottom:8px;
	right:16px;
	background:#FFFFEA;
	opacity:0.4;
	box-shadow:1px 1px 3px grey;
}

#middleText {
	position:absolute;
	top:50%;
	width:100%;
	text-align:center;
	background:#FFFFEA;
	opacity:0.4;
	box-shadow:1px 1px 3px grey;
}

/* !!!!!!!!Important!!!!!!!! */
/* Screen size to responsive */
/* 
	@media not|only mediatype and (media feature) {
	    CSS-Code;
	}
*/
div.resp_album_img {
	border: 1px solid #ccc;
}

div.resp_album_img:hover {
	box-shadow: 1px 2px 3px grey;
}

div.resp_album_desc {
	padding:15px;
	text-align:center;
}

div.resp_album_img img {
	width:100%;
	height:auto;
}

.responsive {
	padding:0 6px;
	float:left;
	width:23%;
}

@media only screen and (max-width: 700px) {
	.responsive {
		width: 47%;
		margin:6px 0;
	}
}

@media only screen and (max-width: 500px) {
	.responsive {
		width:100%;
	}
}

.clearfix:after {
	content:'';
	display:table;
	clear:both;
}

/* popup window HTML+CSS+JS*/
#modal_img {
	margin:10px;
	padding:5px;
	border: 2px solid grey;
	border-radius: 5px;
	cursor:pointer;
	transition:0.3s;
}

#modal_img:hover {
	box-shadow: 1px 1px 3px grey, 3px 4px 5px grey;
}

#modal_container {
	position:absolute;
	display:none;
	top:0px;
	left:0px;
	padding-top:100px;
	width:100%;
	height:100%;
	background:rgba(0,0,0);  /*Fall back color*/
	background:rgba(0,0,0,0.4);
	overflow:auto; /*Enable scorlling*/
	transition:0.3s;
}
#modal_close_icon {
	position:fixed;
	width:25px;
	height:25px;
	text-align: center;
	top:10px;
	right:20px;
	font-size:20px;
	color: black;
	background:white;
	border:2px groove grey;
	cursor:pointer;
}

#modal_content {
	display:block;
	position:fixed;
	top:200px;
	margin:auto;
	width:80%;
	clear:both;
}

/*Modal add animation*/
#modal_container {
	-webkit-animation-name: zoom;
	-webkit-animation-duration: 0.6s;
	animation-name: zoom;
	animation-duration:0.6s;
}

@-webkit-keyframes zoom {
	from {
		-webkit-transform:scale(0);
	}
	to {
		-webkit-transform:scale(1);
	}
}

@keyframes zoom {
	from {
		transform:scale(0);
	}
	to {
		transform:scale(1);
	}
}

/*按钮动画实例*/
.button_anima1 {
	display:inline-block;
	border-radius: 4px;
	background: #f4511e;
	border:none;
	text-align:center;
	color:white;
	vertical-align: middle;
	font-size:28px;
	padding: 20px;
	width:200px;
	transition:all 0.5s;
	cursor:pointer;
	margin:5px;
}

.button_anima1 span {
	cursor: pointer;
	display:inline-block;
	position:relative;
	transition: 0.5s;
}

.button_anima1 span:after {
	content:">";
	position: absolute;
	opacity:0;
	top:0;
	right:-20px;
	transition:0.5s;
}

.button_anima1:hover span {
	padding-right:25px;
}

.button_anima1:hover span:after {
	opacity:1;
	right:0;
}
.button_anima2 {
    position: relative;
    background-color: #4CAF50;
    border: none;
    font-size: 28px;
    color: #FFFFFF;
    padding: 20px;
    width: 200px;
    text-align: center;
    -webkit-transition-duration: 0.4s; /* Safari */
    transition-duration: 0.4s;
    text-decoration: none;
    overflow: hidden;
    cursor: pointer;
}

.button_anima2:after {
    content: "";
    background: #90EE90;
    display: block;
    position: absolute;
    padding-top: 300%;
    padding-left: 350%;
    margin-left: -20px; /*!important*/
    margin-top: -120%;
    opacity: 0;
    transition: all 0.8s
}

.button_anima2:active:after {
    padding: 0;
    margin: 0;
    opacity: 1;
    transition: 0s
}

/* Pagination */
ul.pagination {
    display: inline-block;
    padding: 0;
    margin: 0;
}

ul.pagination li {display: inline;}

ul.pagination li a {
    color: black;
    float: left;
    padding: 8px 16px;
    text-decoration: none;
}

ul.breadcrumb {
    padding: 8px 16px;
    list-style: none;
    background-color: #eee;
}
ul.breadcrumb li {display: inline;}
/* 相邻兄弟选取器：相邻兄弟选择器（Adjacent sibling selector）可选择紧接在另一元素后的元素，且二者有相同父元素。 
   如果需要选择紧接在另一个元素后的元素，而且二者有相同的父元素，可以使用相邻兄弟选择器（Adjacent sibling selector）。 
   以下实例选取了所有位于 <div> 元素后的第一个 <p> 元素: div+p { }*/
ul.breadcrumb li+li:before {
    padding: 8px;
    color: black;
    content: "/\00a0";
}
ul.breadcrumb li a {color: green;}

/* CSS3 Flex box */
/* 弹性盒子由弹性容器(Flex container)和弹性子元素(Flex item)组成。
   弹性容器通过设置 display 属性的值为 flex 或 inline-flex将其定义为弹性容器。
   弹性容器内包含了一个或多个弹性子元素。
   注意： 弹性容器外及弹性子元素内是正常渲染的。弹性盒子只定义了弹性子元素如何在弹性容器内布局。
   弹性子元素通常在弹性盒子内一行显示。默认情况每个容器只有一行。
   *** 如果我们设置 direction 属性为 rtl (right-to-left),弹性子元素的排列方式也会改变，页面布局也跟着改变:
*/
/* flex-direction 顺序指定了弹性子元素在父容器中的位置。
   flex-direction: row | row-reverse | column | column-reverse
	row：横向从左到右排列（左对齐），默认的排列方式。
	row-reverse：反转横向排列（右对齐，从后往前排，最后一项排在最前面。
	column：纵向排列。
	column-reverse：反转纵向排列，从后往前排，最后一项排在最上面。
*/
/* 内容对齐（justify-content）属性应用在弹性容器上，把弹性项沿着弹性容器的主轴线（main axis）对齐。
	justify-content: flex-start | flex-end | center | space-between | space-around
	flex-start： 弹性项目向行头紧挨着填充。这个是默认值。第一个弹性项的main-start外边距边线被放置在该行的main-start边线，而后续弹性项依次平齐摆放。
	flex-end： 弹性项目向行尾紧挨着填充。第一个弹性项的main-end外边距边线被放置在该行的main-end边线，而后续弹性项依次平齐摆放。
	center： 弹性项目居中紧挨着填充。（如果剩余的自由空间是负的，则弹性项目将在两个方向上同时溢出）。
	space-between： 弹性项目平均分布在该行上。如果剩余空间为负或者只有一个弹性项，则该值等同于flex-start。否则，第1个弹性项的外边距和行的main-start边线对齐，
					而最后1个弹性项的外边距和行的main-end边线对齐，然后剩余的弹性项分布在该行上，相邻项目的间隔相等。
	space-around： 弹性项目平均分布在该行上，两边留有一半的间隔空间。如果剩余空间为负或者只有一个弹性项，则该值等同于center。
	               否则，弹性项目沿该行分布，且彼此间隔相等（比如是20px），同时首尾两边和弹性容器之间留有一半的间隔（1/2*20px=10px）。
*/
/* align-items 设置或检索弹性盒子元素在侧轴（纵轴）方向上的对齐方式。
	align-items: flex-start | flex-end | center | baseline | stretch
	flex-start：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界。
	flex-end：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。
	center：弹性盒子元素在该行的侧轴（纵轴）上居中放置。（如果该行的尺寸小于弹性盒子元素的尺寸，则会向两个方向溢出相同的长度）。
	baseline：如弹性盒子元素的行内轴与侧轴为同一条，则该值与'flex-start'等效。其它情况下，该值将参与基线对齐。
	stretch：如果指定侧轴大小的属性值为'auto'，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸，但同时会遵照'min/max-width/height'属性的限制。
*/
/* flex-wrap 属性用于指定弹性盒子的子元素换行方式。
	flex-flow:  nowrap|wrap|wrap-reverse
	nowrap - 默认， 弹性容器为单行。该情况下弹性子项可能会溢出容器。
	wrap - 弹性容器为多行。该情况下弹性子项溢出的部分会被放置到新行，子项内部会发生断行
	wrap-reverse -反转 wrap 排列。
*/
/* align-content 属性用于修改 flex-wrap 属性的行为。类似于 align-items, 但它不是设置弹性子元素的对齐，而是设置各个行的对齐。
	align-content: flex-start | flex-end | center | space-between | space-around | stretch
	stretch - 默认。各行将会伸展以占用剩余的空间。
	flex-start - 各行向弹性盒容器的起始位置堆叠。
	flex-end - 各行向弹性盒容器的结束位置堆叠。
	center -各行向弹性盒容器的中间位置堆叠。
	space-between -各行在弹性盒容器中平均分布。
	space-around - 各行在弹性盒容器中平均分布，两端保留子元素与子元素之间间距大小的一半。
*/
/* align-self 属性用于设置弹性元素自身在侧轴（纵轴）方向上的对齐方式。
	align-self: auto | flex-start | flex-end | center | baseline | stretch
	auto：如果'align-self'的值为'auto'，则其计算值为元素的父元素的'align-items'值，如果其没有父元素，则计算值为'stretch'。
	flex-start：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界。
	flex-end：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。
	center：弹性盒子元素在该行的侧轴（纵轴）上居中放置。（如果该行的尺寸小于弹性盒子元素的尺寸，则会向两个方向溢出相同的长度）。
	baseline：如弹性盒子元素的行内轴与侧轴为同一条，则该值与'flex-start'等效。其它情况下，该值将参与基线对齐。
	stretch：如果指定侧轴大小的属性值为'auto'，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸，但同时会遵照'min/max-width/height'属性的限制。
*/
/* flex 属性用于指定弹性子元素如何分配空间。 
	flex: auto | initial | none | inherit |  [ flex-grow ] || [ flex-shrink ] || [ flex-basis ]
	auto: 计算值为 1 1 auto
	initial: 计算值为 0 1 auto
	none：计算值为 0 0 auto
	inherit：从父元素继承
	[ flex-grow ]：定义弹性盒子元素的扩展比率。
	[ flex-shrink ]：定义弹性盒子元素的收缩比率。
	[ flex-basis ]：定义弹性盒子元素的默认基准值。
*/
/* order : <integer>：用整数值来定义排列顺序，数值小的排在前面。可以为负值。
*/

.flex-container {
	display:-webkit-flex;
	display:flex;
	width: 400px;
	height:250px;
	background-color:lightgrey;
}

.flex-item {
	background-color:cornflowerblue;
	width:100px;
	height:100px;
	margin:10px;
}
