{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/main.js","webpack:///./src/TaskCollection.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","Task","[object Object]","console","log","names","map","sum","numbers","reduce","prev","current","tasks","this","forEach","task","toGulp","toCool","prepare","cost","discount","applyDiscount","age","great","results","count","User","username","email","args","foo","setUsername","newEmail","user","regsiter","dir","handle","dump","repeat"],"mappings":"aACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,GAAA,EACAH,YAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAZ,EAAAmB,EAAA,SAAAjB,GACAY,OAAAC,eAAAb,EAAA,cAAiDkB,OAAA,KAIjDpB,EAAAqB,EAAA,SAAAlB,GACA,IAAAS,EAAAT,KAAAmB,WACA,WAA2B,OAAAnB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAU,EAAAC,GAAsD,OAAAV,OAAAW,UAAAC,eAAAnB,KAAAgB,EAAAC,IAGtDxB,EAAA2B,EAAA,GAIA3B,IAAA4B,EAAA,+CCnCAC,EACAC,SACAC,QAAAC,IAAA,sBAGAF,SACA,IAAAG,GAAA,2BACAA,IAAAC,IAAAvB,MAAqCA,cACrCoB,QAAAC,IAAAC,IAsBA,SAAAE,KAAAC,GAIA,OAAAA,EAAAC,OAAA,CAAAC,EAAAC,IAAAD,EAAAC,GAnBA,UAxCAT,YAAAU,MACAC,KAAAD,QAKAV,UAOAW,KAAAD,MAAAE,QAAAC,KAAAC,UAQAH,KAAAD,MAAAE,QAAAC,KAAAE,aAmBA,IAAAhB,EAAA,IAAAA,EAAA,IAAAA,IAAAiB,UAWAf,QAAAC,IALA,SAAAe,EAAAC,EAHA,IAIA,OAAAD,IAAAC,EAIAC,CAAA,MAWAlB,QAAAC,IAAAG,EAAA,YAMAJ,QAAAC,IAAAG,MADA,eAmBAJ,QAAAC,IALA,iDAkCAD,QAAAC,KAXArB,KAXA,OAYAuC,IAXA,GAcApB,QAEA,gBAA6BW,KAAA9B,SAK7BwC,SAIA,IASAC,QAAKA,EAAAC,UARL1C,KAAA,QACAuC,IAAA,GACAE,SAAA,aACAC,MAAA,IAOAtB,QAAAC,IAAAoB,EAAAC,SAoCAC,EAEAxB,YAAAyB,EAAAC,GACAf,KAAAc,WACAd,KAAAe,QAGA1B,mBAAA2B,GACA,WAAAH,KAAAG,GAKAC,UACA,YAGAC,gBAAAJ,GACAd,KAAAc,WAGAzB,YAAA8B,GACAnB,KAAAe,MAAAI,GAKA,IAAAC,EAAAP,EAAAQ,SAAA,qCAIA/B,QAAAgC,IAAAF,GACA9B,QAAAC,IAAA6B,EAAAH,MA4BA,UAXA5B,SACAC,QAAAC,IAAA,oCAbAgC,SAyCA,UCrPAlC,YAAAU,MACAC,KAAAD,QAGAV,OACAC,QAAAC,IAAAS,KAAAD,UDiPA,kBACA,oBACA,aACAyB,OAYAlC,QAAAC,IAAA,IAAAkC,OAAA,GAFA,sBAEA,IAAAA,OAAA","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * Created by puppylpy on 2018/4/23.\n */\n\n/************************************************************/\n/* Arrows */\nclass TaskCollection {\n    constructor(tasks = []) {\n        this.tasks = tasks;\n    }\n\n    // Regarding the this object, if you use arrow, then it's pointing to prepare function,\n    // If function keyword is using, then pointing to function itself.\n    prepare() {\n        // Old way of adding function\n        // this.tasks.forEach(function(task){\n        //     console.log(task);\n        // });\n\n        // No parenthesis if there's only one variable\n        this.tasks.forEach(task => task.toGulp());      // return keyword is implicit\n\n        // No variable, then definitely add parenthesis\n        // this.tasks.forEach(() => console.log(task));\n\n        // Add parenthesis if there're two variables\n        // this.tasks.forEach((task, index) => console.log(task, index));\n\n        this.tasks.forEach(task => task.toCool());\n    }\n}\n\nclass Task {\n    toGulp () {\n        console.log(\"converting to gulp\");\n    }\n\n    toCool () {\n        let names = ['Taylor', 'Jeffrey', 'Adam'];\n        names = names.map(name => `${name} is cool.`); // Template string\n        console.log(names);\n    }\n}\n\n/************************************************************/\n/* Default Parameters */\n\nnew TaskCollection([new Task(), new Task(), new Task()]).prepare();\n\nfunction defaultDiscountRate() {\n    return 0.1;\n}\n// function applyDiscount(cost, discount = 0.1) {\nfunction applyDiscount(cost, discount = defaultDiscountRate()) {\n    return cost - (cost * discount);\n}\n\n// console.log(applyDiscount(100, 0.3));\nconsole.log(applyDiscount(100));\n\n/************************************************************/\n/* Rest operator, which should be placed at the end of the parameters */\nfunction sum(...numbers) {\n    // return numbers.reduce(function(prev, current) {\n    //     return prev + current;\n    // });\n    return numbers.reduce((prev, current) => prev + current);\n}\n\nconsole.log(sum(1, 2, 3, 4, 5));\n\n/************************************************************/\n/* Spread operator: Spread an array into variables of function */\n\nlet nums = [1, 2 , 3, 4, 5, 6];\nconsole.log(sum(...nums));\n\n/************************************************************/\n/* Template Strings */\n\nlet str = 'Foo';\n// let template = [\n// '<div class=\"Alert\">',\n//     '<p>Fpp</p>',\n// '</div>'].join('');\n\n// equal to\n\nlet template = `\n<div class=\"Alert\">\n    <p>${str}</p>\n</div>`\n\nconsole.log(template);\n\n/************************************************************/\n/* Awesome Object Enhancements */\n\n// Object Shorthand\nfunction getPerson() {\n    let name = 'John';\n    let age = 25;\n\n    // return {\n    //     name: name,\n    //     age: age\n    // };\n    // equal to\n    // return {name, age}; // only if your property name and value variable are the same\n\n    return {\n        name,\n        age,\n        // great: function () {\n        // function shorthand\n        great () {\n            // return \"hello, \" + this.name;\n            return `Hello, ${this.name}`;\n        }\n    };\n}\n\nconsole.log((getPerson()).great());\n\n/************************************************************/\n/* object destructuring */\nlet data = {\n    name: 'Karen',\n    age: 32,\n    results: ['foo', 'bar'],\n    count: 30\n\n};\n\n// Destructuring the object into two simple variables\nlet {results, count} = data;\n\nconsole.log(results, count);\n\n// ES5 way\n// function getData (data) {\n    // var results = data.results;\n    // var count = data.count;\n\n// ES6 way\nfunction getData ({results, count}) {\n    console.log(results, count);\n}\n\n/************************************************************/\n/* Classes */\n\n// ES 5\n/*\nfunction User (username, email) {\n    this.username = username;\n    this.email = email;\n\n    // this.changeEmail = function () {  ...  }\n}\n\nUser.prototype.changeEmail = function (newEmail) {\n    this.email = newEmail;\n};\n\nvar user = new User('JeffreWay', 'support@laracasts.com');\n\nuser.changeEmail('foo@example.com');\n\nconsole.dir(user);\n*/\n\n// ES 6\nclass User {\n    // Don't need to assign class variable, but use language similar to backend language\n    constructor(username, email) {\n        this.username = username;\n        this.email = email;\n    }\n\n    static regsiter(...args) {\n        return new User(...args);\n    }\n\n    // get and set accessors.\n    // could be used for computed properties\n    get foo () {\n        return \"foo\";\n    }\n\n    set setUsername (username) {\n        this.username = username;\n    }\n\n    changeEmail (newEmail) {\n        this.email = newEmail;\n    }\n}\n\n// let user = new User(\"JeffreWay\", 'support@laracasts.com');\nlet user = User.regsiter(\"JeffreWay\", 'support@laracasts.com');\n\n// user.changeEmail(\"foo@example.com\");\n\nconsole.dir(user);\nconsole.log(user.foo);\n\n\n// classes are first class citizens, therefore they can be used as values, practically anywhere\nfunction log(strategy) {\n    strategy.handle();\n}\n\n// log(new class {\n//     handle() {\n//         alert('Using the alert strategy to log');\n//     }\n// });\n\n// or\n\nclass consoleLogger {\n    handle () {\n        console.log('Using console strategy to log');\n    }\n}\n\nclass alertLogger {\n    handle () {\n        alert('Using alert strategy to log');\n    }\n}\n\nlog(new consoleLogger);\n\n/************************************************************/\n/* ES2015 module: export keyword */\n/* However, current browser doesn't support ES6 out of the box\n * Therefore you need to introduce a middleman to compile both files into one\n * */\n\n// 1.\n// import { TasksCollection, exportFoo } from './TaskCollection';\n\n// 2.\n// First is default, second and the rest are not default\n// import TasksCollection, { exportFoo } from './TaskCollection';\n\n// 3.\nimport TasksCollection from './TaskCollection';\n\nnew TasksCollection([\n    'Go to the store',\n    'Finish screencast',\n    'Eat cake'\n]).dump();\n\n/************************************************************/\n/* Useful String additions */\n/* string.includes()\n * string.startsWith()\n * string.endsWith()\n * string.repeat()\n * */\n\nlet heading = 'The heading is Here';\n\nconsole.log(\"=\".repeat(5) + heading + '='.repeat(5));\n","/**\n * Created by puppylpy on 2018/4/25.\n */\n\n// ES2015 module: export keyword\nexport default class TasksCollection {\n    constructor(tasks = []) {\n        this.tasks = tasks;\n    }\n\n    dump () {\n        console.log(this.tasks);\n    }\n}\n\n\nlet exportDefault = 'DefaultString';\n// You can export multiple data and values\nexport let exportFoo = 'exported Foo';\n\n// You can export value at the end of file\n// export default exportDefault;"],"sourceRoot":""}